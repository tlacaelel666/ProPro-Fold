#!/usr/bin/env python3
# Colaboracion y Desarrollo
#
# Para un proyecto m√°s grande, se deben estructurar pruebas de la siguiente manera:
#
# /tests
#   ‚îú‚îÄ‚îÄ test_analyzer.py      # Pruebas unitarias para la clase principal
#   ‚îî‚îÄ‚îÄ test_circuits.py      # Pruebas para la generaci√≥n de circuitos
#
# Esta estructura facilitar√≠a el mantenimiento, la colaboraci√≥n y la implementaci√≥n
# de un sistema de integraci√≥n continua (CI) con herramientas como pytest.
"""
Analizador Cu√°ntico de Prote√≠nas
Herramienta interactiva para el an√°lisis cu√°ntico de estructuras proteicas.

Este script unificado combina la l√≥gica de an√°lisis con una interfaz de
l√≠nea de comandos robusta, aplicando mejoras en validaci√≥n de entradas,
manejo de errores, visualizaci√≥n configurable y modularidad.

by SmokAppSoftware jako with Claude AI & Gemini AI
Versi√≥n 1.0
"""

# -----------------------------------------------------------------------------
# IMPORTACI√ìN DE M√ìDULOS
# Aseguramos que todos los m√≥dulos necesarios est√©n importados al inicio.
# -----------------------------------------------------------------------------
import sys
import time
import warnings
from typing import Dict, List, Optional, Tuple

import matplotlib.pyplot as plt
import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.quantum_info import Pauli, SparsePauliOp, Statevector
from qiskit.visualization import plot_bloch_multivector, plot_histogram
from qiskit_aer import AerSimulator

# Suprimir warnings de depreciaci√≥n de Qiskit para una salida m√°s limpia
warnings.filterwarnings('ignore', category=DeprecationWarning)

# --- Clase para colores en la consola (inspirado en tu script de CLI) ---
class Colors:
    """Clase para definir colores de texto ANSI para la consola."""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header():
    """Imprime el encabezado de la aplicaci√≥n con colores."""
    header = f"""
{Colors.OKCYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    {Colors.BOLD}üß¨ ANALIZADOR CU√ÅNTICO DE PROTE√çNAS üß¨{Colors.ENDC}{Colors.OKCYAN}                    ‚ïë
‚ïë                                                                              ‚ïë
‚ïë          {Colors.OKBLUE}An√°lisis cu√°ntico avanzado de estructuras proteicas{Colors.ENDC}{Colors.OKCYAN}                ‚ïë
‚ïë               {Colors.HEADER}by SmokAppSoftware jako with Claude AI & Gemini AI{Colors.ENDC}{Colors.OKCYAN}               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.ENDC}
"""
    print(header)

class QuantumProteinAnalyzer:
    """
    Clase principal para el an√°lisis cu√°ntico de prote√≠nas.

    Esta clase encapsula la creaci√≥n de circuitos, simulaci√≥n, generaci√≥n de
    operadores y visualizaci√≥n de resultados para el estudio de prote√≠nas
    mediante computaci√≥n cu√°ntica.

    Args:
        verbose (bool): Si es True, imprime mensajes detallados durante la ejecuci√≥n.
    """
    def __init__(self, verbose: bool = True):
        self.verbose = verbose
        self.simulator = AerSimulator()
        self.current_circuit: Optional[QuantumCircuit] = None
        self.current_operator: Optional[SparsePauliOp] = None
        self.results_history: List[Dict] = []
        
        if self.verbose:
            print(f"{Colors.OKGREEN}üî¨ Inicializando Analizador Cu√°ntico de Prote√≠nas...{Colors.ENDC}")
            print(f"{Colors.OKGREEN}‚úÖ Simulador cu√°ntico listo.{Colors.ENDC}")

    def create_protein_quantum_circuit(self, num_qubits: int = 5, custom_gates: bool = True) -> QuantumCircuit:
        """
        Crea un circuito cu√°ntico que representa una estructura proteica simplificada.

        Args:
            num_qubits: N√∫mero de qubits (representa grados de libertad). Debe estar entre 2 y 10.
            custom_gates: Si es True, aplica puertas que simulan interacciones complejas.

        Returns:
            El circuito cu√°ntico configurado.

        Raises:
            ValueError: Si el n√∫mero de qubits est√° fuera del rango permitido.

        Example:
            >>> analyzer = QuantumProteinAnalyzer()
            >>> qc = analyzer.create_protein_quantum_circuit(num_qubits=4)
        """
        if self.verbose:
            print(f"\n{Colors.BOLD}üîß Creando circuito cu√°ntico para prote√≠na con {num_qubits} qubits...{Colors.ENDC}")
        
        # 2. VALIDACI√ìN DE ENTRADAS
        # Se agrega una excepci√≥n clara para entradas inv√°lidas.
        if not 2 <= num_qubits <= 10:
            raise ValueError("El n√∫mero de qubits debe estar entre 2 y 10 para este modelo.")
        
        qc = QuantumCircuit(num_qubits, num_qubits)
        
        if self.verbose: print("  üìê Configurando estado inicial (conformaci√≥n base)...")
        qc.x(0)
        qc.h(1)
        if num_qubits >= 3: qc.x(2)
        if num_qubits >= 4: qc.h(3)
        if num_qubits >= 5: qc.x(4)
        
        if custom_gates:
            if self.verbose: print("  üîÑ Aplicando interacciones complejas entre residuos...")
            qc.barrier()
            # Interacciones locales (ej. electrost√°ticas, van der Waals)
            for i in range(num_qubits - 1):
                qc.rxx(np.pi / 4, i, i + 1)
                qc.rzz(np.pi / 8, i, i + 1)
            
            qc.barrier()
            # Intercambio conformacional entre extremos (si es suficientemente largo)
            if num_qubits >= 4:
                qc.swap(0, num_qubits - 1)
            
            qc.barrier()
            # Enlaces pept√≠dicos simulados con CNOTs
            for i in range(num_qubits - 1):
                qc.cx(i, i + 1)
        
        qc.measure_all()
        self.current_circuit = qc
        
        if self.verbose:
            print(f"{Colors.OKGREEN}  ‚úÖ Circuito creado con {qc.num_qubits} qubits y profundidad {qc.depth()}.{Colors.ENDC}")
        
        return qc

    def visualize_circuit(self, circuit: Optional[QuantumCircuit] = None, style: str = "mpl", gui: bool = True):
        """
        Visualiza el circuito cu√°ntico.

        Args:
            circuit: Circuito a visualizar. Usa el circuito actual si es None.
            style: Estilo de visualizaci√≥n ('mpl' o 'text').
            gui: Si es False, fuerza la salida de texto, √∫til para entornos sin GUI.
        """
        circuit = circuit or self.current_circuit
        if not circuit:
            print(f"{Colors.FAIL}‚ùå No hay circuito para visualizar. Crea uno primero.{Colors.ENDC}")
            return
        
        if self.verbose: print(f"\n{Colors.BOLD}üé® Visualizando circuito cu√°ntico...{Colors.ENDC}")
        
        # 4. VISUALIZACI√ìN CONFIGURABLE
        if not gui or style == "text":
            if not gui and self.verbose:
                print(f"{Colors.WARNING}  ‚ö†Ô∏è Visualizaci√≥n gr√°fica desactivada. Mostrando versi√≥n de texto.{Colors.ENDC}")
            print("\n" + "="*60)
            print("REPRESENTACI√ìN TEXTUAL DEL CIRCUITO:")
            print("="*60)
            print(circuit.draw(output='text', fold=-1))
        else:
            try:
                fig = circuit.draw(output='mpl', style='iqp', fold=-1)
                fig.suptitle("üß¨ Circuito Cu√°ntico de Prote√≠na", fontsize=16, fontweight='bold')
                plt.tight_layout(rect=[0, 0, 1, 0.96])
                plt.show()
            # 1. BLOQUES VAC√çOS Y CONTROL DE FLUJO
            except Exception as e:
                print(f"{Colors.FAIL}‚ö†Ô∏è Error al crear visualizaci√≥n gr√°fica (¬øejecutando en un entorno sin GUI?): {e}{Colors.ENDC}")
                print(f"{Colors.WARNING}Mostrando versi√≥n de texto como alternativa.{Colors.ENDC}")
                print(circuit.draw(output='text', fold=-1))

    def simulate_protein_dynamics(self, circuit: Optional[QuantumCircuit] = None, shots: int = 1024) -> Optional[Dict]:
        """
        Simula la din√°mica cu√°ntica de la prote√≠na ejecutando el circuito.

        Args:
            circuit: Circuito a simular. Usa el actual si es None.
            shots: N√∫mero de mediciones a realizar.

        Returns:
            Un diccionario con los resultados o None si falla.
        """
        circuit = circuit or self.current_circuit
        if not circuit:
            print(f"{Colors.FAIL}‚ùå No hay circuito para simular. Crea uno primero.{Colors.ENDC}")
            return None
        
        if self.verbose:
            print(f"\n{Colors.BOLD}üöÄ Simulando din√°mica proteica con {shots} mediciones...{Colors.ENDC}")
        start_time = time.time()
        
        try:
            transpiled_circuit = transpile(circuit, self.simulator)
            job = self.simulator.run(transpiled_circuit, shots=shots)
            result = job.result()
            counts = result.get_counts()
            
            simulation_time = time.time() - start_time
            
            result_data = {
                'counts': counts,
                'shots': shots,
                'simulation_time': simulation_time,
                'circuit_depth': circuit.depth(),
                'num_qubits': circuit.num_qubits
            }
            self.results_history.append(result_data)
            
            if self.verbose:
                print(f"  ‚úÖ Simulaci√≥n completada en {simulation_time:.3f} segundos.")
                sorted_states = sorted(counts.items(), key=lambda item: item[1], reverse=True)
                prob = (sorted_states[0][1] / shots) * 100
                print(f"  üéØ Estado m√°s probable: {Colors.OKCYAN}{sorted_states[0][0]}{Colors.ENDC} ({prob:.2f}%)")
            
            return result_data
        # 1. BLOQUES VAC√çOS Y CONTROL DE FLUJO
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå Error durante la simulaci√≥n: {e}{Colors.ENDC}")
            return None

    def visualize_results(self, results: Optional[Dict] = None, gui: bool = True):
        """
        Visualiza los resultados de la simulaci√≥n con gr√°ficos.

        Args:
            results: Resultados a visualizar. Usa los √∫ltimos si es None.
            gui: Si es False, solo imprime una tabla en texto.
        """
        results = results or (self.results_history[-1] if self.results_history else None)
        if not results:
            print(f"{Colors.FAIL}‚ùå No hay resultados para visualizar.{Colors.ENDC}")
            return
        
        counts = results.get('counts', {})
        if not counts:
            print(f"{Colors.WARNING}‚ö†Ô∏è Los resultados no contienen datos de conteo para visualizar.{Colors.ENDC}")
            return

        if self.verbose: print(f"\n{Colors.BOLD}üìä Visualizando resultados de la simulaci√≥n...{Colors.ENDC}")
        
        # 4. VISUALIZACI√ìN CONFIGURABLE
        if gui:
            try:
                plot_histogram(counts, figsize=(12, 6), color='skyblue', title='Distribuci√≥n de Estados Conformacionales de la Prote√≠na')
                plt.show()
            except Exception as e:
                print(f"{Colors.FAIL}‚ö†Ô∏è Error al crear histograma gr√°fico: {e}{Colors.ENDC}")
                print(f"{Colors.WARNING}Mostrando tabla de resultados como alternativa.{Colors.ENDC}")
                self._print_results_table(counts, results['shots'])
        else:
            if self.verbose:
                print(f"{Colors.WARNING}  ‚ö†Ô∏è Visualizaci√≥n gr√°fica desactivada. Mostrando tabla de texto.{Colors.ENDC}")
            self._print_results_table(counts, results['shots'])
            
        # Imprimir estad√≠sticas adicionales
        print(f"\n{Colors.BOLD}üìà Estad√≠sticas de la simulaci√≥n:{Colors.ENDC}")
        print(f"  ‚Ä¢ Total de shots: {results['shots']}")
        print(f"  ‚Ä¢ Estados √∫nicos medidos: {len(counts)}")
        print(f"  ‚Ä¢ Tiempo de simulaci√≥n: {results['simulation_time']:.3f}s")
        print(f"  ‚Ä¢ Profundidad del circuito: {results['circuit_depth']}")

    def _print_results_table(self, counts: Dict[str, int], total_shots: int):
        """Imprime una tabla de resultados como alternativa a los gr√°ficos."""
        print(f"\n{Colors.BOLD}üìã RESULTADOS DE LA SIMULACI√ìN (Top 10):{Colors.ENDC}")
        print("-" * 50)
        print(f"{'Estado':<15} {'Conteo':<10} {'Probabilidad (%)'}")
        print("-" * 50)
        sorted_results = sorted(counts.items(), key=lambda item: item[1], reverse=True)
        for state, count in sorted_results[:10]:
            prob = (count / total_shots) * 100
            print(f"{state:<15} {count:<10} {prob:>15.2f}")
        print("-" * 50)

    def create_polarity_operator(self, s_tensor: np.ndarray, lambda_scalar: float = 1.0) -> SparsePauliOp:
        """
        Crea un operador Hamiltoniano basado en un tensor de polaridad.

        Args:
            s_tensor: Tensor de polaridad S_ŒºŒΩ (debe ser cuadrado, al menos 4x4).
            lambda_scalar: Par√°metro de acoplamiento para escalar los coeficientes.

        Returns:
            El operador Hamiltoniano como un SparsePauliOp.

        Raises:
            ValueError: Si las dimensiones del tensor son inv√°lidas.
        """
        num_qubits = s_tensor.shape[0] -1
        if self.verbose:
            print(f"\n{Colors.BOLD}üî¨ Creando operador Hamiltoniano con {num_qubits} qubits...{Colors.ENDC}")
            print(f"  Tensor shape: {s_tensor.shape}, Lambda: {lambda_scalar}")

        # 2. VALIDACI√ìN DE ENTRADAS
        if s_tensor.shape[0] != s_tensor.shape[1]:
            raise ValueError("El tensor de polaridad debe ser una matriz cuadrada.")
        if s_tensor.shape[0] < 2:
            raise ValueError("El tensor debe ser al menos de 2x2 para definir 1 qubit.")
        
        pauli_terms = []
        paulis = ['X', 'Y', 'Z'] # Asignaci√≥n a ejes espaciales

        # T√©rminos de un solo qubit
        for i in range(num_qubits):
            for j, pauli_op in enumerate(paulis):
                # Usar elementos diagonales del tensor para t√©rminos de un solo cuerpo
                coeff = lambda_scalar * s_tensor[i + 1, i + 1]
                if abs(coeff) > 1e-9:
                    pauli_str = 'I' * i + pauli_op + 'I' * (num_qubits - 1 - i)
                    pauli_terms.append((pauli_str, coeff))

        # T√©rminos de interacci√≥n de dos qubits
        for i in range(num_qubits):
            for j in range(i + 1, num_qubits):
                # Usar elementos fuera de la diagonal para interacciones
                coeff = lambda_scalar * s_tensor[i + 1, j + 1]
                if abs(coeff) > 1e-9:
                    # Ejemplo de interacci√≥n ZZ, se puede hacer m√°s complejo
                    pauli_str = 'I' * i + 'Z' + 'I' * (j - i - 1) + 'Z' + 'I' * (num_qubits - 1 - j)
                    pauli_terms.append((pauli_str, coeff))

        if not pauli_terms:
            print(f"{Colors.WARNING}‚ö†Ô∏è No se generaron t√©rminos Pauli significativos. El operador ser√° nulo.{Colors.ENDC}")
            return SparsePauliOp('I' * num_qubits, 0)
            
        operator = SparsePauliOp.from_list(pauli_terms)
        self.current_operator = operator
        
        if self.verbose:
            print(f"{Colors.OKGREEN}  ‚úÖ Operador creado con {len(operator)} t√©rminos.{Colors.ENDC}")
        return operator

    def analyze_operator(self, operator: Optional[SparsePauliOp] = None):
        """
        Analiza e imprime las propiedades de un operador cu√°ntico.
        
        Args:
            operator: Operador a analizar. Usa el actual si es None.
        """
        operator = operator or self.current_operator
        if not operator:
            print(f"{Colors.FAIL}‚ùå No hay operador para analizar. Cr√©alo primero.{Colors.ENDC}")
            return
        
        print(f"\n{Colors.BOLD}üîç AN√ÅLISIS DEL OPERADOR HAMILTONIANO:{Colors.ENDC}")
        print("=" * 50)
        print(f"üìä N√∫mero de t√©rminos Pauli: {len(operator)}")
        print(f"üî¢ N√∫mero de qubits: {operator.num_qubits}")
        
        coeffs = np.abs(operator.coeffs)
        print(f"\n{Colors.BOLD}üéØ Top 5 t√©rminos m√°s significativos (por magnitud):{Colors.ENDC}")
        print("-" * 50)
        sorted_indices = np.argsort(coeffs)[::-1]
        for i, idx in enumerate(sorted_indices[:5]):
            pauli_str = operator.paulis[idx].to_label()
            coeff_val = operator.coeffs[idx]
            print(f"  {i+1}. {pauli_str:<15}: {coeff_val.real:12.6f}")
        print("-" * 50)

def create_example_protein_tensor(size: int = 5) -> np.ndarray:
    """Crea un tensor de polaridad de ejemplo para una prote√≠na."""
    print(f"{Colors.OKBLUE}INFO: Generando tensor de polaridad de ejemplo de {size}x{size}...{Colors.ENDC}")
    # Tensor de ejemplo basado en propiedades fisicoqu√≠micas simuladas
    # Dimensi√≥n 0: "Tiempo" o energ√≠a base
    # Dimensiones 1..N: Propiedades espaciales/fisicoqu√≠micas
    np.random.seed(42) # Para reproducibilidad
    base_tensor = np.random.rand(size, size)
    s_tensor = (base_tensor + base_tensor.T) / 2 # Simetrizar
    np.fill_diagonal(s_tensor, np.random.uniform(0.5, 2.5, size)) # Diagonales m√°s fuertes
    return s_tensor

# -----------------------------------------------------------------------------
# MEN√ö INTERACTIVO 
# -----------------------------------------------------------------------------
def interactive_menu():
    """Men√∫ interactivo principal para controlar el analizador."""
    analyzer = QuantumProteinAnalyzer(verbose=True)
    gui_enabled = True # Por defecto, la visualizaci√≥n gr√°fica est√° activada

    while True:
        print("\n" + "="*70)
        print(f"        {Colors.HEADER}{Colors.BOLD}üß¨ MEN√ö PRINCIPAL - ANALIZADOR CU√ÅNTICO DE PROTE√çNAS üß¨{Colors.ENDC}")
        print("="*70)
        print("--- Simulaci√≥n de Circuito ---")
        print("1. üîß Crear/Recrear Circuito Cu√°ntico")
        print("2. üé® Visualizar Circuito Actual")
        print("3. üöÄ Simular Din√°mica Proteica")
        print("4. üìä Visualizar Resultados de Simulaci√≥n")
        print("\n--- An√°lisis de Hamiltoniano ---")
        print("5. üî¨ Crear Operador Hamiltoniano (desde tensor)")
        print("6. üîç Analizar Operador Actual")
        print("\n--- Utilidades ---")
        print(f"7. üñ•Ô∏è  Activar/Desactivar GUI (Actual: {'Activada' if gui_enabled else 'Desactivada'})")
        print("8. üìã Ver Historial de Simulaciones")
        print("9. ‚ùå Salir")
        print("-"*70)
        
        choice = input(f"{Colors.BOLD}ü§î Selecciona una opci√≥n (1-9): {Colors.ENDC}").strip()
        
        try:
            if choice == '1':
                num_qubits = int(input("üî¢ N√∫mero de qubits (2-10, por defecto 5): ") or "5")
                custom = input("üéõÔ∏è  Aplicar puertas complejas? (s/n, por defecto s): ").lower().strip() != 'n'
                analyzer.create_protein_quantum_circuit(num_qubits, custom)
            
            elif choice == '2':
                analyzer.visualize_circuit(gui=gui_enabled)
            
            elif choice == '3':
                shots = int(input("üéØ N√∫mero de shots (por defecto 1024): ") or "1024")
                if analyzer.simulate_protein_dynamics(shots=shots):
                    print(f"{Colors.OKGREEN}‚úÖ Simulaci√≥n completada con √©xito.{Colors.ENDC}")
            
            elif choice == '4':
                analyzer.visualize_results(gui=gui_enabled)
            
            elif choice == '5':
                size = int(input("üìè Tama√±o del tensor (N+1, por defecto 5): ") or "5")
                s_tensor = create_example_protein_tensor(size)
                print("Tensor generado:\n", s_tensor)
                lambda_val = float(input("‚ö° Valor de lambda (acoplamiento, por defecto 1.0): ") or "1.0")
                analyzer.create_polarity_operator(s_tensor, lambda_val)
            
            elif choice == '6':
                analyzer.analyze_operator()

            elif choice == '7':
                gui_enabled = not gui_enabled
                status = "Activada" if gui_enabled else "Desactivada"
                color = Colors.OKGREEN if gui_enabled else Colors.WARNING
                print(f"{color}‚úÖ Visualizaci√≥n gr√°fica ahora est√° {status}.{Colors.ENDC}")

            elif choice == '8':
                if analyzer.results_history:
                    print(f"\n{Colors.BOLD}üìã HISTORIAL DE SIMULACIONES ({len(analyzer.results_history)} en total):{Colors.ENDC}")
                    print("-" * 60)
                    for i, r in enumerate(analyzer.results_history, 1):
                        print(f"  {i}. Qubits: {r['num_qubits']}, Shots: {r['shots']}, "
                              f"Tiempo: {r['simulation_time']:.3f}s, Estados: {len(r['counts'])}")
                else:
                    print(f"{Colors.WARNING}üì≠ El historial de simulaciones est√° vac√≠o.{Colors.ENDC}")
            
            elif choice == '9':
                print(f"\n{Colors.OKBLUE}üëã ¬°Gracias por usar el Analizador Cu√°ntico de Prote√≠nas!{Colors.ENDC}")
                sys.exit(0)
            
            else:
                print(f"{Colors.FAIL}‚ùå Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero del 1 al 9.{Colors.ENDC}")
                
        except ValueError as e:
            print(f"{Colors.FAIL}‚ùå Error de entrada: {e}. Por favor, introduce un valor v√°lido.{Colors.ENDC}")
        except KeyboardInterrupt:
            print(f"\n\n{Colors.WARNING}‚ö†Ô∏è Operaci√≥n cancelada por el usuario. Volviendo al men√∫.{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå Ocurri√≥ un error inesperado: {e}{Colors.ENDC}")
        
        if choice != '9':
            input(f"\n{Colors.OKBLUE}‚è∏Ô∏è  Presiona Enter para continuar...{Colors.ENDC}")


if __name__ == "__main__":
    print_header()
    interactive_menu()
